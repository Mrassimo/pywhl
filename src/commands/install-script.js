import { Command } from 'commander';
import chalk from 'chalk';
import { writeFile } from 'fs/promises';
import { join, basename } from 'path';
import { platform } from 'os';

export const installScriptCommand = new Command('install-script')
  .alias('script')
  .description('Generate installation script for downloaded wheels')
  .argument('<packages...>', 'Package names or wheel files')
  .option('-o, --output <file>', 'Output script file', 'install-wheels.sh')
  .option('-d, --directory <dir>', 'Directory containing wheels', './wheels')
  .option('--venv <path>', 'Virtual environment path')
  .option('--system', 'Install to system Python', false)
  .option('--force', 'Force reinstall', false)
  .option('--no-deps', 'Skip dependencies', false)
  .action(async (packages, options) => {
    try {
      const isWindows = platform() === 'win32';
      const scriptExt = isWindows ? '.bat' : '.sh';
      const outputFile = options.output.endsWith(scriptExt) ? options.output : options.output + scriptExt;
      
      let script;
      if (isWindows) {
        script = generateWindowsScript(packages, options);
      } else {
        script = generateUnixScript(packages, options);
      }

      await writeFile(outputFile, script, { encoding: 'utf8', mode: 0o755 });
      
      console.log(chalk.green(`✓ Generated installation script: ${outputFile}`));
      console.log(chalk.gray(`\nTo run the script:`));
      console.log(chalk.cyan(isWindows ? `  .\\${outputFile}` : `  ./${outputFile}`));
      
      if (options.venv && !options.system) {
        console.log(chalk.yellow(`\nNote: Script will install to virtual environment: ${options.venv}`));
      }
    } catch (error) {
      console.error(chalk.red(`Error: ${error.message}`));
      process.exit(1);
    }
  });

function generateUnixScript(packages, options) {
  const lines = ['#!/bin/bash', '', '# Pywhl installation script', '# Generated by pywhl CLI', ''];
  
  // Add header
  lines.push('set -e  # Exit on error');
  lines.push('');
  lines.push('echo "Starting wheel installation..."');
  lines.push('');

  // Check for Python
  lines.push('# Check Python installation');
  lines.push('if ! command -v python3 &> /dev/null; then');
  lines.push('    echo "Error: Python 3 is not installed"');
  lines.push('    exit 1');
  lines.push('fi');
  lines.push('');

  // Virtual environment handling
  if (options.venv && !options.system) {
    lines.push('# Activate virtual environment');
    lines.push(`if [ -d "${options.venv}" ]; then`);
    lines.push(`    echo "Activating virtual environment: ${options.venv}"`);
    lines.push(`    source "${options.venv}/bin/activate"`);
    lines.push('else');
    lines.push(`    echo "Error: Virtual environment not found: ${options.venv}"`);
    lines.push('    exit 1');
    lines.push('fi');
    lines.push('');
  }

  // Wheel directory check
  lines.push(`# Check wheel directory`);
  lines.push(`WHEEL_DIR="${options.directory}"`);
  lines.push('if [ ! -d "$WHEEL_DIR" ]; then');
  lines.push('    echo "Error: Wheel directory not found: $WHEEL_DIR"');
  lines.push('    exit 1');
  lines.push('fi');
  lines.push('');

  // Install pip if needed
  lines.push('# Ensure pip is available');
  lines.push('if ! python3 -m pip --version &> /dev/null; then');
  lines.push('    echo "Installing pip..."');
  lines.push('    python3 -m ensurepip --upgrade');
  lines.push('fi');
  lines.push('');

  // Build pip install command
  const pipCmd = ['python3 -m pip install'];
  
  if (options.force) {
    pipCmd.push('--force-reinstall');
  }
  
  if (options.noDeps) {
    pipCmd.push('--no-deps');
  }
  
  if (!options.system) {
    pipCmd.push('--user');
  }

  // Install wheels
  lines.push('# Install wheels');
  lines.push('echo "Installing wheels..."');
  lines.push('');
  
  if (packages.length === 1 && packages[0] === '*') {
    // Install all wheels in directory
    lines.push('for wheel in "$WHEEL_DIR"/*.whl; do');
    lines.push('    if [ -f "$wheel" ]; then');
    lines.push(`        echo "Installing $(basename "$wheel")..."`);
    lines.push(`        ${pipCmd.join(' ')} "$wheel"`);
    lines.push('    fi');
    lines.push('done');
  } else {
    // Install specific packages
    packages.forEach(pkg => {
      if (pkg.endsWith('.whl')) {
        lines.push(`echo "Installing ${pkg}..."`);
        lines.push(`${pipCmd.join(' ')} "$WHEEL_DIR/${pkg}"`);
      } else {
        lines.push(`echo "Installing ${pkg}..."`);
        lines.push(`# Find and install the wheel for ${pkg}`);
        lines.push(`for wheel in "$WHEEL_DIR"/${pkg}-*.whl; do`);
        lines.push('    if [ -f "$wheel" ]; then');
        lines.push(`        ${pipCmd.join(' ')} "$wheel"`);
        lines.push('        break');
        lines.push('    fi');
        lines.push('done');
      }
      lines.push('');
    });
  }

  // Completion message
  lines.push('echo ""');
  lines.push('echo "✓ Installation complete!"');
  lines.push('echo ""');
  lines.push('echo "Installed packages:"');
  lines.push('python3 -m pip list | grep -E "(' + packages.join('|') + ')"');

  return lines.join('\n');
}

function generateWindowsScript(packages, options) {
  const lines = ['@echo off', '', 'REM Pywhl installation script', 'REM Generated by pywhl CLI', ''];
  
  lines.push('echo Starting wheel installation...');
  lines.push('');

  // Check for Python
  lines.push('REM Check Python installation');
  lines.push('python --version >nul 2>&1');
  lines.push('if errorlevel 1 (');
  lines.push('    echo Error: Python is not installed or not in PATH');
  lines.push('    exit /b 1');
  lines.push(')');
  lines.push('');

  // Virtual environment handling
  if (options.venv && !options.system) {
    lines.push('REM Activate virtual environment');
    lines.push(`if exist "${options.venv}\\Scripts\\activate.bat" (`);
    lines.push(`    echo Activating virtual environment: ${options.venv}`);
    lines.push(`    call "${options.venv}\\Scripts\\activate.bat"`);
    lines.push(') else (');
    lines.push(`    echo Error: Virtual environment not found: ${options.venv}`);
    lines.push('    exit /b 1');
    lines.push(')');
    lines.push('');
  }

  // Wheel directory check
  lines.push('REM Check wheel directory');
  lines.push(`set WHEEL_DIR=${options.directory}`);
  lines.push('if not exist "%WHEEL_DIR%" (');
  lines.push('    echo Error: Wheel directory not found: %WHEEL_DIR%');
  lines.push('    exit /b 1');
  lines.push(')');
  lines.push('');

  // Build pip install command
  const pipCmd = ['python -m pip install'];
  
  if (options.force) {
    pipCmd.push('--force-reinstall');
  }
  
  if (options.noDeps) {
    pipCmd.push('--no-deps');
  }
  
  if (!options.system) {
    pipCmd.push('--user');
  }

  // Install wheels
  lines.push('REM Install wheels');
  lines.push('echo Installing wheels...');
  lines.push('');
  
  if (packages.length === 1 && packages[0] === '*') {
    // Install all wheels in directory
    lines.push('for %%f in ("%WHEEL_DIR%\\*.whl") do (');
    lines.push('    echo Installing %%~nxf...');
    lines.push(`    ${pipCmd.join(' ')} "%%f"`);
    lines.push(')');
  } else {
    // Install specific packages
    packages.forEach(pkg => {
      if (pkg.endsWith('.whl')) {
        lines.push(`echo Installing ${pkg}...`);
        lines.push(`${pipCmd.join(' ')} "%WHEEL_DIR%\\${pkg}"`);
      } else {
        lines.push(`echo Installing ${pkg}...`);
        lines.push(`for %%f in ("%WHEEL_DIR%\\${pkg}-*.whl") do (`);
        lines.push(`    ${pipCmd.join(' ')} "%%f"`);
        lines.push(')');
      }
      lines.push('');
    });
  }

  // Completion message
  lines.push('echo.');
  lines.push('echo Installation complete!');
  lines.push('echo.');
  lines.push('echo Installed packages:');
  lines.push('python -m pip list | findstr /R "' + packages.join(' ') + '"');
  lines.push('');
  lines.push('pause');

  return lines.join('\r\n');
}